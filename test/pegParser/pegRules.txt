
ruleDef			= ruleDefName WSP* ":" WSP* expression (WSP+ expression)* (NL / EOS)	// what of multiline?
ruleDefName		= [a-z]i [a-z0-9]i*


expression		= predicate? not? (ruleName / literal / chars / dot) multiplicity?
multiplicity	= (zeroOrMore / oneOrMore / optional)

wsp				= [ \t]

builtIn			= WSP / NL / EOS



----

ruleDef			= ruleDefName WSP* ":" WSP* rule (NL / EOS)		// what of multiline?
ruleDefName		= [a-z]i [a-z0-9]i*

rule			= firstOf / sequence / FAIL
sequence		= expression (WSP+ expression)*
firstOf			= expression WSP+ "/" WSP+ expression (WSP+ "/" WSP+ expression)*

expression		= predicate? ("(" rule ")" / ruleName / literal / chars / dot) multiplicity?
predicate		= "!" / "&"
multiplicity	= "*" / "+" / "?"
ruleName		= [a-z]i [a-z0-9]i*
literal			= ("\"" (("\" [\\"fnrt]) / [^"])+ "\"") / ("'" (("\" [\\'fnrt]) / [^'])+ "'")
chars			= "[" "^"? (("\" [\\"fnrt]) / ([a-zA-Z0-9] "-" [a-zA-Z0-9]) / [a-zA-Z0-9])+ "]" "i"?
dot				= "."


WSP				= [ \t]



// for multiline, WSP looks ahead, allows \n but not \nRuleName


sid
sid sid
sid / sid

(sid)
(sid) (sid sid)
(sid) / (sid / sid)

sid / (sid sid) / (sid / sid)
 
