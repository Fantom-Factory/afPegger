
grammar      <- (!\eos line)+

# line         <- emptyLine / commentLine / ruleDef / \err(FAIL)
# emptyLine    <- sp* \eol
# commentLine  <- sp* ("#" / "//") sp* comment \eol
# comment      <- [^\n]*

ruleDef      <- ruleName cwsp* ("=" / "<-") cwsp* rule cnl
ruleName     <- [a-zA-Z] [a-zA-Z0-9_\-]*
rule         <- firstOf / sequence / \err(FAIL)

sequence     <- expression (cwsp+ expression)*
// FIXME simplify firstof
firstOf      <- expression cwsp* "/" cwsp* expression (cwsp* "/" cwsp* expression)*
expression   <- predicate? (label ":")? type multiplicity?

label        <- [a-zA-Z] [a-zA-Z0-9_\-]*
type         <- ("(" cwsp* rule cwsp* ")") / ruleName / literal / chars / macro / dot
predicate    <- "!" / "&"
multiplicity <- "*" / "+" / "?"
literal      <- singleQuote / doubleQuote
singleQuote  <- "'" (unicode / ("\\" .) / [^'])+ "'" "i"?
doubleQuote  <- "\"" (unicode / ("\\" .) / [^"])+ "\"" "i"?
chars        <- "[" (unicode / ("\\" .) / [^\]])+ "]" "i"?
macro        <- "\\" [a-zA-Z]+ ("(" [^)\n]* ")")?
unicode      <- "\\" "u" [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9] [a-fA-F0-9]
dot          <- "."

# sp           <- [ \t]

cwsp			= sp / (cnl sp)
cnl				= comment / \eol
 
comment			= ("#" / "//") (!\eos [^\n])* \eol
