
grammar			= (!\eos (rule / (cwsp* cnl)))+
ruleDef			= exclude:"-"? ruleName debugOff:"-"? definedAs elements cnl
ruleName		= [a-zA-Z] [a-zA-Z0-9-]*
-definedAs		= cwsp* ("=" / "=/") cwsp*
-elements		= alternation cwsp*

alternation		= concatenation (cwsp* "/" cwsp* concatenation)*
concatenation	= repetition (cwsp+ repetition)*
-repetition 	= repeat? element
repeat			= (a:DIGIT* "*" b:DIGIT*) / n:DIGIT+
-element		= rulename / group / option / charVal / numVal / proseVal
group			= "(" cwsp* alternation cwsp* ")"
option			= "[" cwsp* alternation cwsp* "]"

-charVal		= insensitiveStr / sensitiveStr
-insensitiveStr	= "%i"? quotedStr
-sensitiveStr	= "%s"  quotedStr
-quotedStr		= "\"" string:[ !#-~]* "\""
				  // [ !#-~] == [^\"] but limits matching chars to VCHAR

-numVal			= binVal / decVal / hexVal
binVal			= "%b" [01]+      (("-" [01]+     ) / ("." [01]+ )*    )
decVal			= "%d" [0-9]+     (("-" [0-9]+    ) / ("." [0-9]+)*    )
hexVal			= "%x" [0-9A-F]i+ (("-" [0-9A-F]i+) / ("." [0-9A-F]i+)*)

proseVal		= "<" [ -=?-~]* ">"
				  // [ -=?-~] == [^>] but limits matching chars to VCHAR

-cwsp-			= WSP / (cnl WSP)
-cnl-			= comment / CRLF
-comment-		= ";" (WSP / VCHAR)* CRLF

-DIGIT-			= [0-9]
-WSP-			= [ \t]
-CRLF-			= \eos / "\n"
-VCHAR-			= [!-~]
